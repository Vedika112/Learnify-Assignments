---------Client.java-----
package com.cap;

import java.util.List;
import java.util.Scanner;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import com.cap.config.AppConfig;
import com.cap.entity.Employee;
import com.cap.service.EmpService;
import com.cap.service.EmpServiceImp;
public class Client {
	static Scanner sc = new Scanner(System.in);
	Employee emp = new Employee();
	public static void main(String[] args) {
		ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
		EmpService service = context.getBean("service",EmpServiceImp.class);
		while (true) {
			System.out.println("\n\n\n\n\nEmployee Crud Operation:");
			System.out.println("1.Create Employee");
			System.out.println("2.Find Employee");
			System.out.println("3.Update Employee");
			System.out.println("4.Delete Employee");
			System.out.println("5.List All Employees");
			System.out.println("6.Exit");
			System.out.println("Enter your choice:");
			int ch = sc.nextInt();
			switch (ch) {
			case 1:
				System.out.println("Enter Employee Name: ");
				String ename = sc.next();
				System.out.println("Enter Employee Salary: ");
				int esal = sc.nextInt();
				
				Employee emp = new Employee();
				emp.setEmpName(ename);
				emp.setEmpSal(esal);
				service.addEmployee(emp);
				System.out.println("Employee Inserted");
				break;
			case 2:
				System.out.println("Enter Id to fetch Employee:");
				int eid = sc.nextInt();
				Employee findemp = service.getEmployeeById(eid);
				if (findemp == null) {
					System.out.println("no employees present");
				} else {
					System.out.println("Employee Id:" + findemp.getEmpId());
					System.out.println("Employee Name:" + findemp.getEmpName());
					System.out.println("Employee Salary:" + findemp.getEmpSal());
					}
				break;
			case 3:
				System.out.println("Enter Id to fetch Employee:");
				int id = sc.nextInt();
				System.out.println("Enter the name to update:");
				String updename = sc.next();
				Employee updateemp = service.getEmployeeById(id);
				if (updateemp == null) {
					System.out.println("No employee present");
				} else {
					updateemp.setEmpName(updename);
					service.updateEmployee(updateemp);
					System.out.println("Employee name Updated");
				}
				break;
			case 4:
				System.out.println("Enter Id to Delete Employee:");
				int did = sc.nextInt();
				service.deleteEmployee(did);
				System.out.println("Employee deleted successfully");
				break;
			case 5:
				List<Employee> l1 = service.listEmployee();
				System.out.println("\t Employee Id  \t Employee Name  \t Employee Salary \t City");
				System.out.println("********************************************");
				for (Employee e1 : l1) {
					System.out.println(" \t     " + e1.getEmpId() + " \t\t "
							+ e1.getEmpName() + " \t \t  \t    " + e1.getEmpSal());}
				System.out.println("********************************************");
				break;
			case 6:
				System.out.println("Exited from Employee application");
				sc.close();
				System.exit(1);
			default:
				System.out.println("Wrong choice....\n Please Enter Your Choice Again...");
				break;
			}
		}
	}
}
--------EmpService.java------------
package com.cap.service;

import java.util.List;

import com.cap.entity.Employee;

public interface EmpService {

	public abstract void addEmployee(Employee e);
	public abstract void updateEmployee(Employee e);
	public abstract void deleteEmployee(int id);
	public abstract Employee getEmployeeById(int id);
	public abstract List<Employee> listEmployee();
}
-------EmpServiceImp.java--------
package com.cap.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cap.dao.EmpDao;
import com.cap.entity.Employee;

@Service("service")
public class EmpServiceImp implements EmpService {
   @Autowired
   private EmpDao dao;
	@Override
	public void addEmployee(Employee e) {
		dao.addEmployee(e);
		
	}

	@Override
	public void updateEmployee(Employee e) {
		dao.updateEmployee(e);
		
	}

	@Override
	public void deleteEmployee(int id) {
		dao.deleteEmployee(id);
		
	}

	@Override
	public Employee getEmployeeById(int id) {
		Employee e=dao.getEmployeeById(id);
		return e;
	}

	@Override
	public List<Employee> listEmployee() {
		List<Employee > le=dao.listEmployee();
		return le;
	}

}


-------EmpDao.java--------
package com.cap.dao;

import java.util.List;

import com.cap.entity.Employee;

public interface EmpDao {

	public abstract void addEmployee(Employee e);
	public abstract void updateEmployee(Employee e);
	public abstract void deleteEmployee(int id);
	public abstract Employee getEmployeeById(int id);
	public abstract List<Employee> listEmployee();

}
--------EmpDaoImp.java---------
package com.cap.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.cap.entity.Employee;

@Repository
@Transactional
public class EmpDaoImp implements EmpDao {

	@PersistenceContext  
	private EntityManager entityManager;

	public void setEntityManager(EntityManager entityManager) {
		this.entityManager = entityManager;
	}

	@Override
	public Employee getEmployeeById(int eid) {
		Employee emp = entityManager.find(Employee.class, eid);
		return emp;
	}
	@Override

	public void addEmployee(Employee emp) {
		entityManager.persist(emp);
	}

	@Override

	public void deleteEmployee(int emp) {
		Employee emp1=getEmployeeById(emp);
		entityManager.remove(emp1);
	}

	@Override

	public void updateEmployee(Employee emp) {
		entityManager.merge(emp);
	}


	@Override
	public List<Employee> listEmployee() {
		// TODO Auto-generated method stub

		TypedQuery<Employee> q2 = entityManager.createQuery("select c from Employee c", Employee.class);
		List<Employee> l1 = q2.getResultList();
		return l1;
	}

}


---------Employee.java-----------
package com.cap.entity;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;

@Entity
public class Employee {
@Id
@GeneratedValue
private int empId;
private String empName;
private int empSal;
public int getEmpId() {
	return empId;
}
public void setEmpId(int empId) {
	this.empId = empId;
}
public String getEmpName() {
	return empName;
}
public void setEmpName(String empName) {
	this.empName = empName;
}
public int getEmpSal() {
	return empSal;
}
public void setEmpSal(int empSal) {
	this.empSal = empSal;
}

public Employee() {
	// TODO Auto-generated constructor stub
}
public Employee(int empId, String empName, int empSal) {
	super();
	this.empId = empId;
	this.empName = empName;
	this.empSal = empSal;
}
@Override
public String toString() {
	return "Employee [empId=" + empId + ", empName=" + empName + ", empSal=" + empSal + "]";
}


}



-------AppConfig.java---------
package com.cap.config;
import java.util.Properties;

import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;

import org.hibernate.dialect.PostgreSQLDialect;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import com.mchange.v2.c3p0.DriverManagerDataSource;
@Configuration
@EnableTransactionManagement
@ComponentScan(basePackages="com.cap")
public class AppConfig {
	@Bean
	public LocalContainerEntityManagerFactoryBean entityManagerFactory() {
		LocalContainerEntityManagerFactoryBean em=new LocalContainerEntityManagerFactoryBean();
		em.setDataSource(oracleDataSource());
		em.setPackagesToScan("com.cap.entity");
		JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
		em.setJpaVendorAdapter(vendorAdapter);
		em.setJpaProperties(oracleProperties());
		return em;
	}
	@Bean
	public DataSource oracleDataSource() {
		try {
			DriverManagerDataSource dataSource = new DriverManagerDataSource();
			dataSource.setDriverClass("org.postgresql.Driver");
			dataSource.setJdbcUrl("jdbc:postgresql://localhost:5432/student");
			dataSource.setUser("postgres");
			dataSource.setPassword("password");
		
			return dataSource;
		} catch (Throwable e) {
			e.printStackTrace();
			return null;
		}
	}
	Properties oracleProperties() {
		Properties properties = new Properties();
		properties.setProperty("hibernate.dialect","org.hibernate.dialect.PostgreSQLDialect");
		properties.setProperty("hibernate.hbm2ddl.auto", "create");
		properties.setProperty("hibernate.show_sql", "true");
		properties.setProperty("hibernate.format_sql", "true");
		properties.setProperty("spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation", "true");
		return properties;
	}
	@Bean
	public PlatformTransactionManager transactionManager(
			EntityManagerFactory emf) {
		JpaTransactionManager transactionManager = new JpaTransactionManager();
		transactionManager.setEntityManagerFactory(emf);
		return transactionManager;
	}
	@Bean
	public PersistenceExceptionTranslationPostProcessor exceptionTranslation() {
		return new PersistenceExceptionTranslationPostProcessor();
	}

	
}




