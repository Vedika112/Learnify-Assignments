                                                              --*--*--Session 1--*--*--*--
                                                           
                                                           
   JDBC
   
   //creating table
   
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class Demo {
public static void main(String[] args) throws ClassNotFoundException, SQLException {
	
	Class.forName("org.postgresql.Driver");
	Connection conn=DriverManager.getConnection("jdbc:postgresql://localhost/student", "postgres", "password");
	Statement stmt=conn.createStatement();
	boolean r=stmt.execute("create table student(name varchar(10),rollno int)");
	System.out.println("Table Created");
}
}

//inserting values in table

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class Demo1 {
public static void main(String[] args) throws ClassNotFoundException, SQLException {
	Class.forName("org.postgresql.Driver");
	Connection conn=DriverManager.getConnection("jdbc:postgresql://localhost/student","postgres","password");
     Statement stmt=conn.createStatement();
     int result=stmt.executeUpdate("insert into student values('john',8090)");
     stmt.executeUpdate("insert into student values('sita',1010)");
     stmt.executeUpdate("insert into student values('sam',2020)");
     System.out.println("inserted");
}
}

//updating table data

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class Demo2 {
public static void main(String[] args) throws SQLException, ClassNotFoundException {
	Class.forName("org.postgresql.Driver");
	Connection con=DriverManager.getConnection("jdbc:postgresql://localhost/student","postgres","password");
	Statement stmt=con.createStatement();
	int result=stmt.executeUpdate("update student set name='ram' where rollno=8090");
	System.out.println("Updated");
}
}

//Print table data on console

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class Demo3 {
	public static void main(String[] args) throws SQLException, ClassNotFoundException {
		Class.forName("org.postgresql.Driver");
		Connection con=DriverManager.getConnection("jdbc:postgresql://localhost/student","postgres","password");
		Statement stmt=con.createStatement();
		ResultSet result=stmt.executeQuery("select * from student");
		while(result.next()) {
		System.out.println(result.getString(1)+" "+result.getInt(2));
	}
}}

                                                              
                                                              
// create a class with end-user implementation scanner class, username and password matching or not otherwise it will give an error.
 import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;

public class PasswordMatching {
public static void main(String[] args) throws ClassNotFoundException, SQLException {
	Scanner sc=new Scanner(System.in);
	System.out.println("Enter Username");
	String username=sc.next();
	System.out.println("Enter Password");
	String password=sc.next();
	Class.forName("org.postgresql.Driver");
	Connection conn=DriverManager.getConnection("jdbc:postgresql://localhost/student","postgres","password");
    PreparedStatement stmt=conn.prepareStatement("Select * from user where username=? and password=?");
    stmt.setString(1, username);
    stmt.setString(2, password);
    
    ResultSet s=stmt.executeQuery();
    if (s.next()) {
    	System.out.println("Login success");
    	
    }else {
    	System.out.println("incorrect username or password");
    }
    conn.close();
}
}
  
  
                                                                  --*--*--Session 2--*--*--*--
				
--=---=---=-Layered Architecture----=----=----=
 ====Entity====
 
 package com.entity;

public class Employee {
private String empName,empAddress,empEmail;
private int empSalary;

//default constructor
public Employee() {
	// TODO Auto-generated constructor stub
}


//param constructor
public Employee(String empName, String empAddress, String empEmail, int empSalary) {
	super();
	this.empName = empName;
	this.empAddress = empAddress;
	this.empEmail = empEmail;
	this.empSalary = empSalary;
}


//getters and setters
public String getEmpName() {
	return empName;
}
public void setEmpName(String empName) {
	this.empName = empName;
}
public String getEmpAddress() {
	return empAddress;
}
public void setEmpAddress(String empAddress) {
	this.empAddress = empAddress;
}
public String getEmpEmail() {
	return empEmail;
}
public void setEmpEmail(String empEmail) {
	this.empEmail = empEmail;
}
public int getEmpSalary() {
	return empSalary;
}
public void setEmpSalary(int empSalary) {
	this.empSalary = empSalary;
}


//tostring
@Override
public String toString() {
	return "Employee [empName=" + empName + ", empAddress=" + empAddress + ", empEmail=" + empEmail + ", empSalary="
			+ empSalary + "]";
}
}

 =====================UI================
 
 package com.controller;

import java.util.Iterator;
import java.util.Scanner;
import java.util.Set;
import java.util.Map.Entry;

import com.entity.Trainee;
import com.service.TraineeService;
import com.service.TraineeServiceImp;

public class Client {
public static void main(String[] args) {
	TraineeService tservice=new TraineeServiceImp();
	while(true) {
		System.out.println("Trainee Management System");
		System.out.println("1.Add Trainee");
		System.out.println("2.Update Trainee");
		System.out.println("3.Delete Trainee");
		System.out.println("4.Get Trainee");
		System.out.println("5.Get All Trainee");
		Scanner sc=new Scanner(System.in);
		int option=sc.nextInt();
		switch(option) {
		case 1:
			//To add Trainee
			System.out.println("Provide details to add an Trainee");
			System.out.println("Enter Trainee Name");
			String tname=sc.next();
			System.out.println("Enter Trainee Salary");
			int tSal=sc.nextInt();
			System.out.println("Enter Trainee Address");
			String tadd=sc.next();
			System.out.println("Enter Trainee Email");
			String temail=sc.next();		
		    Trainee tr=new Trainee(tname, tadd, temail, tSal);
		    int tId=tservice.addTrainee(tr);
			System.out.println("Trainer added successfully"+tId);
		    break;
		case 2:
			System.out.println("Enter Trainee id to update");
			int tid=sc.nextInt();
			System.out.println("Enter Trainee Name");
			String tname1=sc.next();
			System.out.println("Enter Trainee Salary");
			int tSal1=sc.nextInt();
			System.out.println("Enter Trainee Address");
			String tadd1=sc.next();
			System.out.println("Enter Trainee Email");
			String temail1=sc.next();		
		    Trainee tr1=new Trainee(tname1, tadd1, temail1, tSal1);
		    Trainee updated=tservice.updateTrainee(tid,tr1);
			System.out.println("Trainee updated"+updated);
			break;
		case 3:
			System.out.println("Enter Trainee id to be deleted");
			int tid1=sc.nextInt();
			tservice.deleteTrainee(tid1);
			System.out.println("Trainee deleted successfully"+tid1);
			break;
		case 4:
			System.out.println("Enter Trainee id to get Trainee");
			int tid2=sc.nextInt();
			System.out.println(tservice.getTrainee(tid2));
			break;
		case 5:
			Set<Entry<Integer,Trainee>> Trainees=tservice.getAllTrainee();
			Iterator<Entry<Integer,Trainee>> itr=Trainees.iterator();
			while(itr.hasNext()) {
				Entry<Integer,Trainee> et=itr.next();
				System.out.println(et.getKey()+""+et.getValue());
			}
			break;
		default:
	}
}
}}

======================SERVICE LAYER=============================

-------Service Interface----------
package com.service;

import java.util.Set;
import java.util.Map.Entry;

import com.entity.Trainee;

public interface TraineeService {
int addTrainee(Trainee t);
	
    Trainee updateTrainee(int tid,Trainee t);
    
    void deleteTrainee(int tid);

	Trainee getTrainee(int tid);

	Set<Entry<Integer,Trainee>> getAllTrainee();
}

----------Service Implemnetation---------
package com.service;

import java.util.Map.Entry;
import java.util.Set;

import com.dao.TraineeDao;
import com.dao.TraineeDaoImp;
import com.entity.Trainee;

public class TraineeServiceImp implements TraineeService {
    TraineeDao tdao=new TraineeDaoImp();
	@Override
	public int addTrainee(Trainee t) {
		
		return tdao.addTrainee(t);
	}

	@Override
	public Trainee updateTrainee(int tid, Trainee t) {
		
		return tdao.updateTrainee(tid,t);
	}

	@Override
	public void deleteTrainee(int tid) {
		tdao.deleteTrainee(tid);
		
	}

	@Override
	public Trainee getTrainee(int tid) {
		
		return tdao.getTrainee(tid);
	}

	@Override
	public Set<Entry<Integer, Trainee>> getAllTrainee() {
		
		return tdao.getAllTrainee();
	}

}

================================DAO Layer====================================

---------Dao Interface-----------
package com.dao;

import java.util.Set;
import java.util.Map.Entry;
import com.entity.Trainee;

public interface TraineeDao {
	int addTrainee(Trainee t);
	
    Trainee updateTrainee(int tid,Trainee t);
    
    void deleteTrainee(int tid);

	Trainee getTrainee(int tid);

	Set<Entry<Integer,Trainee>> getAllTrainee();
}


-------------DAO Implementation----------
package com.dao;

import java.util.HashMap;
import java.util.Map.Entry;
import java.util.Set;

import com.entity.Trainee;

public class TraineeDaoImp implements TraineeDao {
HashMap<Integer,Trainee> h=new HashMap(); //connection to database
int tid=100;
	@Override
	public int addTrainee(Trainee t) {
		h.put(++tid, t);
		return tid;
	}

	@Override
	public Trainee updateTrainee(int tid, Trainee t) {
		h.put(tid, t);
		return t;
	}

	@Override
	public void deleteTrainee(int tid) {
		h.remove(tid);
		
	}

	@Override
	public Trainee getTrainee(int tid) {
		
		return h.get(tid);
	}

	@Override
	public Set<Entry<Integer, Trainee>> getAllTrainee() {
		Set<Entry<Integer, Trainee>> result=h.entrySet();
		return result;
	}
  
}

                                                           
